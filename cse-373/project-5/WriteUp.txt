Zach Willson
CSE 373 - WI17
Homework 5
Due 03/03/2017

1. Topological Sort
   
   Node:    In-Degree
   A        0
   B        1
   C        1
   D        2
   E        2
   F        1
   G        0
   
   
   Answer: A, G, B, D, E, C, F
   
2. Minimum Spanning Trees
   
   Answer:
          a) Edge   Cost    Number
             (G,C)  1       1
             (G,D)  1       2
             (B,E)  1       3
             (A,B)  2       4
             (F,E)  2       5
             (C,D)  2
             (A,E)  3
             (G,E)  3       6
             (B,F)  3
             (G,F)  4       7
             (A,D)  4
             
             Output: (G,C), (G,D), (B,E), (A,B), (F,E), (G,E), (F,G) 
             
          b) Vertex     Known?      Cost    Prev
             A          Y           0
             B          Y           2       A 
             C          Y           1       G
             D          Y           1       G
             E          Y           1       B
             F          Y           2       E
             G          Y           3       E
             
             Output: (A,B), (B,E), (E,G), (E,F), (G, D), (G, C)
   
3. Graph Pseudocode

   Answer: 
   
   public Map<Vertex, Set<Vertex>> reverse(Map<Vertex, Set<Vertex>> map) {
       Map<Vertex, Set<Vertex>> returnd = new HashMap
       for(Vertex v : map.keySet) {
           Set<Vertex> nodes = map.get(v)
           for(Vertex n : nodes) {
               returnd.put(n, v)
       return returnd
       
   public Set<Vertex> nextAdjacentVertices(Map<Vertex, Set<Vertex>> graph, Vertex source) {
       Set<Vertex> returnd = new HashSet
       Set<Vertex> n1 = graph.get(source)
       for(Vertex v : n1)
           returnd.add(graph.get(v))
       return returnd
       
   c) the worst case for a is O(v^2) and b is O(n).
            
   
4. Dijkstra's and Negative Edges

   Answer: a) Dijkstra's will find whichever is the first min path, but not necessarily the one with the fewest edges.
              To solve this, you could use another counter and return the path with the smallest counter on it. The counter
              should start at the number of nodes the graph has, and decrease as it finds each min path.
   
           b) If you have three nodes a, b, c where
              a->b is 3
              a->c is 1
              b->c is -10
              
              and you add a to known, the cost will be 3(b) and 1(c), and pick c, then mark
              c as known, but c doesn't connect to anything, so no nodes distances are
              updated.
              
              so the final will be something like:
              a: 0
              b: 3
              c: 1
              
              but it is actually supposed to be the shortest from a to c is through b with a cost of -7
           
           c) It would fail any time the edgecost and k added to 0, and this technique would not work because the original cost
              and the least cost are different if the former is the case.
   
5. Project

   Answer: a) I tested my shortestPath method by using the FindPath's client to
              make sure everything is working properly.
              
           b) I did not do any above-and-beyond for this project, but I think I am
              an awesome person anyway. 